"  inspirations: https://github.com/JetBrains/ideavim/discussions/303
set relativenumber
set number 
set ignorecase
set visualbell
set hlsearch
set incsearch
set startofline

set scrolloff=50
let mapleader=" "

set ideajoin
set idearefactormode=keep
set clipboard=ideaput,unnamedplus
set ideawrite=all

" plugins
set NERDTree
set argtextobj
set highlightedyank
set surround
set which-key
let g:WhichKey_FontSize = 15
set timeoutlen=3500

set easymotion " needs AceJump plugin and IdeaVim-EasyMotion

" nmap <leader><leader>f <Plug>(easymotion-f)
"Plug 'easymotion/vim-easymotion'
"map ,f <Plug>(easymotion-bd-f)

nmap <Esc> :noh<CR><Esc>
nmap <leader>ff <Action>(GotoFile)
nmap <leader>fs <Action>(FindInPath)
nmap <leader>ft <Action>(TextSearchAction)
nmap <leader>fd <Action>(GotoSymbol)
nmap <leader>w :w<CR>
nmap <leader>q :q<CR>
nmap <leader><leader>r :source ~/.ideavimrc<CR>
nmap <leader>e :NERDTreeFind<CR>
" nmap - /
nmap gcc <Action>(CommentByLineComment)
vmap gc <Action>(CommentByLineComment)

" harpoon: https://github.com/AlexGirardDev/HarpoonIJ
nmap <leader>jj :action ShowHarpoon<CR>
nmap <leader>ja :action AddToHarpoon<CR>
nmap <C-f> :action GotoHarpoon1<CR>
nmap <C-d> :action GotoHarpoon2<CR>
nmap <C-s> :action GotoHarpoon3<CR>
nmap <C-a> :action GotoHarpoon4<CR>

vmap <leader><CR> :action ReformatCode<CR>
nmap <leader><CR> :action ReformatCode<CR>

"https://youtrack.jetbrains.com/issue/IDEA-306871/Question-What-is-the-action-when-the-mouse-hovers
nmap K <Action>(ShowErrorDescription)<Action>(QuickJavaDoc) 
noremap gi :action GotoImplementation<CR>

nnoremap <c-.> :action ActivateTerminalToolWindow<CR>
nnoremap \\\\ :action ActivateTerminalToolWindow<CR>

nnoremap gd :action GotoDeclaration<CR>
nnoremap <leader>u :action FindUsages<CR>

vnoremap < <gv
vnoremap > >gv

nnoremap [f :action MethodUp<CR>
nnoremap ]f :action MethodDown<CR>
nnoremap [[ #
nnoremap ]] *

nnoremap <leader>, :action RecentFiles<CR>
nnoremap <leader>gg :action ActivateCommitToolWindow<CR>
nnoremap <leader>gu :action Vcs.UpdateProject<CR>
nnoremap <leader>gm :action Git.Menu<CR>
nnoremap <leader>gc :action Vcs.VcsClone<CR>

nnoremap [e :action NextOccurence<CR>
nnoremap ]e :action PreviousOccurence<CR>

nnoremap C-o :action Back<CR>
nnoremap C-i :action Forward<CR>

nnoremap <S-Tab> :action PreviousTab<cr>
nnoremap <Tab> :action NextTab<cr>

nmap <leader>sh :action SplitHorizontally<cr>
nmap <leader>sv :action SplitVertically<cr>
nmap <leader>sx :action Unsplit<cr>
nmap <leader>bX :action CloseAllUnpinnedEditors<cr>
nmap <leader>bx :action CloseEditor<cr>

nmap <leader>m :action ProjectView.ShowMembers<cr>

nmap <C-l> <C-w>l
nmap <C-h> <C-w>h
nmap <C-j> <C-w>j
nmap <C-k> <C-w>k

" expand selection
vmap <C-Space> <Action>(EditorSelectWord)

" debug / run

" not quite fully baked: see https://towardsdatascience.com/the-essential-ideavim-remaps-291d4cd3971b
nnoremap ,r :action ContextRun<CR>
nnoremap ,b :action ToggleLineBreakpoint<CR>
nnoremap ,d :action ContextDebug<CR>

nmap <leader>la <Action>(ShowIntentionActions)

nmap <leader>rr <Action>(Refactorings.QuickListPopupAction)
vmap <leader>rm <action>(ExtractMethod)
nmap <leader>rm <action>(ExtractMethod)
" extract constant
vmap <leader>rc <action>(IntroduceConstant)
nmap <leader>rc <action>(IntroduceConstant)
" extract field
vmap <leader>rf <action>(IntroduceField)
nmap <leader>rf <action>(IntroduceField)
" extract variable
vmap <leader>rv <action>(IntroduceVariable)
nmap <leader>rv <action>(IntroduceVariable)
nmap <leader>rg <Action>(Generate)

" invert from https://github.com/citizenmatt/dotfiles/blob/fb7105ce4b869049a4b10834f803e8fa86edad06/ideavimrc
function! Invert(calledFromVisual)
  let antonyms = ['true', 'false', 'after', 'before', 'start', 'end', 'left', 'right', 'first', 'last',
                 \'True', 'False', 'After', 'Before', 'Start', 'End', 'Left', 'Right', 'First', 'Last']

  if a:calledFromVisual
    normal gv"wy
  else
    normal "wyiw
  endif
  let wordUnderCaret = @w

  let eraseWord = a:calledFromVisual ? 'gvc' : 'ciw'
  let count = 0
  while (count < len(antonyms))
    if (antonyms[count] ==# wordUnderCaret)
      let antonym = (count % 2 ==? 0) ? antonyms[count + 1] : antonyms[count - 1]
      execute 'normal ' .. eraseWord .. antonym
      break
    endif
    let count += 1
  endwhile
endfunction

nnoremap ! :call Invert(0)<CR>
vnoremap ! :<C-u>call Invert(1)<CR>

" for trying out new settings without doing the nix dance
source ~/.ideavimrc.notnix
